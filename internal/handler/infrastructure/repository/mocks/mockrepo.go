// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/infrastructure/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "store-project/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepoI is a mock of TransactionRepoI interface.
type MockTransactionRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoIMockRecorder
}

// MockTransactionRepoIMockRecorder is the mock recorder for MockTransactionRepoI.
type MockTransactionRepoIMockRecorder struct {
	mock *MockTransactionRepoI
}

// NewMockTransactionRepoI creates a new mock instance.
func NewMockTransactionRepoI(ctrl *gomock.Controller) *MockTransactionRepoI {
	mock := &MockTransactionRepoI{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepoI) EXPECT() *MockTransactionRepoIMockRecorder {
	return m.recorder
}

// CancelTransactionById mocks base method.
func (m *MockTransactionRepoI) CancelTransactionById(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransactionById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTransactionById indicates an expected call of CancelTransactionById.
func (mr *MockTransactionRepoIMockRecorder) CancelTransactionById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransactionById", reflect.TypeOf((*MockTransactionRepoI)(nil).CancelTransactionById), arg0)
}

// ChangeStatus mocks base method.
func (m *MockTransactionRepoI) ChangeStatus(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockTransactionRepoIMockRecorder) ChangeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockTransactionRepoI)(nil).ChangeStatus), arg0, arg1)
}

// CheckStatusById mocks base method.
func (m *MockTransactionRepoI) CheckStatusById(arg0 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatusById", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStatusById indicates an expected call of CheckStatusById.
func (mr *MockTransactionRepoIMockRecorder) CheckStatusById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatusById", reflect.TypeOf((*MockTransactionRepoI)(nil).CheckStatusById), arg0)
}

// Create mocks base method.
func (m *MockTransactionRepoI) Create(arg0 models.Transaction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepoIMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepoI)(nil).Create), arg0)
}

// GetTransactionsByUserEmail mocks base method.
func (m *MockTransactionRepoI) GetTransactionsByUserEmail(arg0 string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserEmail", arg0)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserEmail indicates an expected call of GetTransactionsByUserEmail.
func (mr *MockTransactionRepoIMockRecorder) GetTransactionsByUserEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserEmail", reflect.TypeOf((*MockTransactionRepoI)(nil).GetTransactionsByUserEmail), arg0)
}

// GetTransactionsByUserId mocks base method.
func (m *MockTransactionRepoI) GetTransactionsByUserId(arg0 int64) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserId", arg0)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserId indicates an expected call of GetTransactionsByUserId.
func (mr *MockTransactionRepoIMockRecorder) GetTransactionsByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserId", reflect.TypeOf((*MockTransactionRepoI)(nil).GetTransactionsByUserId), arg0)
}
